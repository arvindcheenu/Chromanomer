const{colorGenerator:t}=require("../generator/color"),r=require("matercolors"),e=require("color-blind"),{cymk:o,rgb:n,hwb:i,hsl:s}=require("../utility");module.exports.Coxy=function(h="en"){this.lang=h,this.colors=t(this.lang),this.chosenColors={},this._nearestCoxy=require("nearest-color").from(t(this.lang)),Object.defineProperty(this,"hex",{get:function(){return this.currentColor}}),Object.defineProperty(this,"rgb",{get:function(){return n(this.currentColor)}}),Object.defineProperty(this,"hwb",{get:function(){return i(this.currentColor)}}),Object.defineProperty(this,"hsl",{get:function(){return s(this.currentColor)}}),Object.defineProperty(this,"cymk",{get:function(){return o(this.currentColor)}}),this.withColor=function(t){if(this.colors.hasOwnProperty(t))return this.currentColor=this.colors[t],this.currentName=t,this;throw new SyntaxError("Input Colour String does not follow Naming Convention.")},this.makePalette=function(){return new r(this.currentColor)},this.withColorBlindness=function(t){return this.findNearest(e[t](this.currentColor))},this.withSubstring=function(t){let r=Object.keys(this.colors).filter(function(r){return r.includes(t)});for(let t=0,e=r.length;t<e;t++)this.chosenColors[r[t]]=this.colors[r[t]];return this},this.makePalettes=function(){return Object.keys(this.chosenColors).map(t=>{let e={};return e[t]=new r(this.chosenColors[t]),e}).reduce((t,r)=>Object.assign(t,r),{})},this.withColorBlindnesses=function(t){for(const[r,o]of Object.entries(this.chosenColors))this.chosenColors[r]=e[t](o);return this},this.findNearest=function(t){let r=this._nearestCoxy(t);return this.currentColor=r.value,this.currentName=r.name,this}};
//# sourceMappingURL=coxy.modern.js.map
